# -*- coding: utf-8 -*-
"""DFU Project DS 2022

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BCCjw1ocZ-xwqU0FvDdnYiD3OHQZKL11

**INM363 Individual Project (PRD3 S 2021/22)** - **Diabetic foot ulcer detection and analysis**

Introduction and Project Description

### Imports
Libraries are imported which will be used throughout. Some packages will be imported later as required.
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import numpy as np
import matplotlib.pyplot as plt
import io
# %matplotlib inline
import imageio
import imgaug as ia
import imgaug.augmenters as iaa
import pandas as pd
import matplotlib.patches as patches
import matplotlib
from PIL import Image, ImageDraw

"""### Google Colab Setup - Cloud and Drive authentication 
Run the below cell to mount the drive. 
"""

from google.colab import drive
drive.mount('/content/drive')

"""Path for Google drive where data is stored.

"""

import os

#Google drive path
#dataset

Train_Google_Drive_Path_AFTER_MYDRIVE = '/content/drive/MyDrive/DFU 2021 for project/DFU/DFUC2021_train/images' 
Train_Google_DRIVE_PATH = os.path.join('drive', 'My Drive', Train_Google_Drive_Path_AFTER_MYDRIVE)
print(os.listdir(Train_Google_DRIVE_PATH))

Test_Google_Drive_Path_AFTER_MYDRIVE = '/content/drive/MyDrive/DFU 2021 for project/DFU/DFUC2021_test' 
Test_Google_DRIVE_PATH = os.path.join('drive', 'My Drive', Test_Google_Drive_Path_AFTER_MYDRIVE)
#print(os.listdir(Test_Google_DRIVE_PATH))


label_Google_Drive_Path_AFTER_MYDRIVE = '/content/drive/MyDrive/DFU 2021 for project/DFU/DFUC2021_train/train.csv' 
label_Google_DRIVE_PATH = os.path.join('drive', 'My Drive', label_Google_Drive_Path_AFTER_MYDRIVE)

# Commented out IPython magic to ensure Python compatibility.
from sklearn.model_selection import train_test_split
from skimage import img_as_ubyte, io, color

import imageio
import imgaug as ia
import imgaug.augmenters as iaa
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib
# %matplotlib inline
from imgaug.augmentables.bbs import BoundingBox, BoundingBoxesOnImage



import cv2
path = '/content/drive/MyDrive/DFU 2021 for project/DFU/DFUC2021_train'
img_dict = dict()

for root, dirs, files in os.walk(path):
    print(os.path.basename(root))
    my_key = os.path.basename(root)

    dir_images = []
    for file_ in files:
        full_file_path = os.path.join(root, file_)
        img = cv2.imread(full_file_path)
        #img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        dir_images.append(img)

    img_dict[my_key] = dir_images

def import_selected_data(tpath,lpath):
  """Load images and labels from selected directories"""
  images = []
  labels = []

 
  # labels from text file
  with open(lpath) as f:
    str_lbl = f.read().splitlines()
    print(len(str_lbl))
    #for line in str_lbl:
      #if labels.append(line[res:])


  #file_names = [file for file in sorted(os.listdir(tpath)) if file.endswith('.jpg')]
  #print(len(file_names))
# image files
  for file in file_names:
    images.append(io.imread(os.path.join(tpath, file)))
  return images,labels

X, y = import_selected_data(Train_Google_DRIVE_PATH, label_Google_DRIVE_PATH)
# using the train test split function

image = imageio.imread('/content/drive/MyDrive/DFU 2021 for project/DFU/DFUC2021_train/images/301003.jpg')
ia.imshow(image)

rotate=iaa.Affine(rotate=60)
rotated_image=rotate.augment_image(image)

imageio.imwrite('/content/drive/MyDrive/DFU 2021 for project/DFU/DFUC2021_train/images/301003_rotate.jpg',rotated_image)
image1 = imageio.imread('/content/drive/MyDrive/DFU 2021 for project/DFU/DFUC2021_train/images/301003_rotate.jpg')
ia.imshow(image1)

import imgaug as ia
import imgaug.augmenters as iaa
from imgaug.augmentables.bbs import BoundingBox, BoundingBoxesOnImage
from imgaug.augmentables.bbs import BoundingBox, BoundingBoxesOnImage
bbs = BoundingBoxesOnImage([
 BoundingBox(x1=177, x2=55, y1=90, y2=160)
], shape=image.shape)
image_aug, bbs_aug = rotate(image=image, bounding_boxes=bbs)
ia.imshow(bbs_aug.draw_on_image(image_aug, size=2))

for i in range(len(bbs.bounding_boxes)):
    before = bbs.bounding_boxes[i]
    after = bbs_aug.bounding_boxes[i]
    print("BB %d: (%.4f, %.4f, %.4f, %.4f) -> (%.4f, %.4f, %.4f, %.4f)" % (
        i,
        before.x1, before.y1, before.x2, before.y2,
        after.x1, after.y1, after.x2, after.y2)
    )

crop = iaa.Crop(percent=(0.2, 0.2)) # crop image
crop_image=crop.augment_image(image)

imageio.imwrite('/content/drive/MyDrive/DFU 2021 for project/DFU/DFUC2021_train/images/301003_crop.jpg',crop_image)
image2 = imageio.imread('/content/drive/MyDrive/DFU 2021 for project/DFU/DFUC2021_train/images/301003_crop.jpg')
ia.imshow(image2)

scale_im =iaa.Affine(scale={"x": (2.5, 2.0), "y": (2.5 , 2.0)})
scale_image =scale_im.augment_image(image)

imageio.imwrite('/content/drive/MyDrive/DFU 2021 for project/DFU/DFUC2021_train/images/301003_Scale_im.jpg',scale_image)
image5 = imageio.imread('/content/drive/MyDrive/DFU 2021 for project/DFU/DFUC2021_train/images/301003_Scale_im.jpg')
ia.imshow(image5)

from imgaug.augmentables.bbs import BoundingBox, BoundingBoxesOnImage
bbs = BoundingBoxesOnImage([
 BoundingBox(x1=177, x2=55, y1=65, y2=160)
], shape=image.shape)

image_aug, bbs_aug = scale_im(image=image, bounding_boxes=bbs)
ia.imshow(bbs_aug.draw_on_image(image_aug, size=2))

for i in range(len(bbs.bounding_boxes)):
    before = bbs.bounding_boxes[i]
    after = bbs_aug.bounding_boxes[i]
    print("BB %d: (%.4f, %.4f, %.4f, %.4f) -> (%.4f, %.4f, %.4f, %.4f)" % (
        i,
        before.x1, before.y1, before.x2, before.y2,
        after.x1, after.y1, after.x2, after.y2)
    )

shear = iaa.Affine(shear=(0,40))
shear_image=shear.augment_image(image)

imageio.imwrite('/content/drive/MyDrive/DFU 2021 for project/DFU/DFUC2021_train/images/301003_Shear_im.jpg',shear_image)
image6 = imageio.imread('/content/drive/MyDrive/DFU 2021 for project/DFU/DFUC2021_train/images/301003_Shear_im.jpg')
ia.imshow(image6)

contrast=iaa.GammaContrast(gamma=2.0)
contrast_image =contrast.augment_image(image)

imageio.imwrite('/content/drive/MyDrive/DFU 2021 for project/DFU/DFUC2021_train/images/301003_Contrast.jpg',contrast_image)
image7 = imageio.imread('/content/drive/MyDrive/DFU 2021 for project/DFU/DFUC2021_train/images/301003_Contrast.jpg')
ia.imshow(image7)